// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/matthewcarter/Downloads/CompilerProject1/Scanner/CMinusScanner2.flex

/*
 * Copyright (C) 2025 Matthew Carter & Michael Dabney
 */

/* C- 1.0 language lexer specification */
package scanner;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;



@SuppressWarnings("fallthrough")
public class CMinusScanner2 implements Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int INCOMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u1b00\126\u0100\1\u2500\1\u0100\1\u2600"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\53\u0100\1\u2c00\41\u1f00"+
    "\1\u0100\1\u2d00\1\u2e00\1\u0100\1\u2f00\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u0100\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\3\u0100"+
    "\1\u5000\1\u5100\1\u5200\11\u1f00\1\u5300\4\u0100\1\u5400\17\u1f00"+
    "\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00\1\u5800"+
    "\1\u5900\27\u0100\1\u5a00\4\u0100\1\u5b00\1\u5c00\41\u1f00\1\u5d00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\27\u1f00\1\u6100\1\u6200"+
    "\1\u6300\1\u6400\7\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\1\u1f00"+
    "\1\u6900\2\u1f00\1\u6a00\1\u6b00\1\u6c00\2\u1f00\1\u6d00\1\u1f00"+
    "\1\u6e00\21\u1f00\246\u0100\1\u6f00\20\u0100\1\u7000\1\u7100\25\u0100"+
    "\1\u7200\34\u0100\1\u7300\2\u0100\1\u7400\11\u1f00\2\u0100\1\u7500"+
    "\5\u1f00\23\u0100\1\u7600\17\u0100\1\u7700\u0ddc\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\2\0\1\5\3\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\15\11\16\1\0\1\17"+
    "\1\20\1\21\1\22\2\0\32\5\1\23\1\0\1\24"+
    "\1\0\1\5\1\0\3\5\1\25\1\26\1\27\1\5"+
    "\1\30\1\31\2\5\1\32\1\5\1\33\1\34\2\5"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\3\5\1\43"+
    "\1\0\1\44\44\0\4\5\4\0\1\5\12\0\1\5"+
    "\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5"+
    "\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5"+
    "\201\0\5\5\1\0\2\5\2\0\4\5\1\0\1\5"+
    "\6\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\123\5\1\0\213\5\10\0\246\5\1\0\46\5"+
    "\2\0\1\5\6\0\51\5\6\0\1\5\100\0\33\5"+
    "\4\0\4\5\30\0\1\5\24\0\53\5\43\0\2\5"+
    "\1\0\143\5\1\0\1\5\17\0\2\5\7\0\2\5"+
    "\12\0\3\5\2\0\1\5\20\0\1\5\1\0\36\5"+
    "\35\0\131\5\13\0\1\5\30\0\41\5\11\0\2\5"+
    "\4\0\1\5\3\0\30\5\4\0\1\5\11\0\1\5"+
    "\3\0\1\5\27\0\31\5\7\0\13\5\5\0\30\5"+
    "\1\0\6\5\21\0\52\5\72\0\66\5\3\0\1\5"+
    "\22\0\1\5\7\0\12\5\17\0\20\5\4\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5"+
    "\1\0\3\5\16\0\4\5\7\0\2\5\10\0\6\5"+
    "\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\37\0\4\5\1\0\1\5"+
    "\23\0\3\5\20\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\22\0\1\5\17\0\2\5\17\0\1\5\7\0\1\5"+
    "\13\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\3\0\1\5\36\0\2\5"+
    "\1\0\3\5\17\0\1\5\21\0\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\26\0\1\5\50\0\1\5\13\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\20\5\3\0\1\5\32\0\3\5"+
    "\2\0\1\5\2\0\2\5\36\0\1\5\4\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\3\0\1\5\37\0\2\5\1\0\2\5\17\0\2\5"+
    "\21\0\11\5\1\0\3\5\1\0\51\5\2\0\1\5"+
    "\20\0\1\5\5\0\3\5\10\0\3\5\30\0\6\5"+
    "\5\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\72\0\60\5\1\0\2\5\13\0\10\5"+
    "\72\0\2\5\1\0\1\5\1\0\5\5\1\0\30\5"+
    "\1\0\1\5\1\0\12\5\1\0\2\5\11\0\1\5"+
    "\2\0\5\5\1\0\1\5\25\0\4\5\40\0\1\5"+
    "\77\0\10\5\1\0\44\5\33\0\5\5\163\0\53\5"+
    "\24\0\1\5\20\0\6\5\4\0\4\5\3\0\1\5"+
    "\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5"+
    "\21\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5"+
    "\1\0\115\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5"+
    "\45\0\20\5\20\0\126\5\2\0\6\5\3\0\u016c\5"+
    "\2\0\21\5\1\0\32\5\5\0\113\5\3\0\13\5"+
    "\7\0\22\5\15\0\23\5\16\0\22\5\16\0\15\5"+
    "\1\0\3\5\17\0\64\5\43\0\1\5\3\0\2\5"+
    "\103\0\131\5\7\0\5\5\2\0\42\5\1\0\1\5"+
    "\5\0\106\5\12\0\37\5\61\0\36\5\2\0\5\5"+
    "\13\0\54\5\4\0\32\5\66\0\27\5\11\0\65\5"+
    "\122\0\1\5\135\0\57\5\21\0\10\5\66\0\36\5"+
    "\15\0\2\5\12\0\54\5\32\0\44\5\51\0\3\5"+
    "\12\0\44\5\2\0\11\5\7\0\53\5\2\0\3\5"+
    "\51\0\4\5\1\0\6\5\1\0\2\5\3\0\1\5"+
    "\5\0\300\5\100\0\26\5\2\0\6\5\2\0\46\5"+
    "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5"+
    "\102\0\2\5\23\0\1\5\34\0\1\5\15\0\1\5"+
    "\20\0\15\5\3\0\41\5\101\0\1\5\4\0\1\5"+
    "\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5"+
    "\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5"+
    "\u0177\0\345\5\6\0\4\5\3\0\2\5\14\0\46\5"+
    "\1\0\1\5\5\0\1\5\2\0\70\5\7\0\1\5"+
    "\20\0\27\5\11\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\120\0\1\5\325\0\3\5\31\0\11\5"+
    "\7\0\5\5\2\0\5\5\4\0\126\5\6\0\3\5"+
    "\1\0\132\5\1\0\4\5\5\0\53\5\1\0\136\5"+
    "\21\0\40\5\60\0\235\5\103\0\56\5\2\0\15\5"+
    "\3\0\20\5\12\0\2\5\24\0\57\5\20\0\37\5"+
    "\2\0\120\5\47\0\11\5\2\0\147\5\2\0\100\5"+
    "\5\0\2\5\1\0\1\5\1\0\5\5\30\0\20\5"+
    "\1\0\3\5\1\0\4\5\1\0\27\5\25\0\1\5"+
    "\7\0\64\5\16\0\62\5\76\0\6\5\3\0\1\5"+
    "\1\0\2\5\13\0\34\5\12\0\27\5\31\0\35\5"+
    "\7\0\57\5\34\0\1\5\20\0\5\5\1\0\12\5"+
    "\12\0\5\5\1\0\51\5\27\0\3\5\1\0\10\5"+
    "\24\0\27\5\3\0\1\5\3\0\62\5\1\0\1\5"+
    "\3\0\2\5\2\0\5\5\2\0\1\5\1\0\1\5"+
    "\30\0\3\5\2\0\13\5\7\0\3\5\14\0\6\5"+
    "\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5"+
    "\1\0\53\5\1\0\16\5\6\0\163\5\35\0\244\5"+
    "\14\0\27\5\4\0\61\5\4\0\156\5\2\0\152\5"+
    "\46\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\154\5\41\0\153\5\22\0\100\5"+
    "\2\0\66\5\50\0\15\5\66\0\2\5\30\0\3\5"+
    "\31\0\1\5\6\0\5\5\1\0\207\5\7\0\1\5"+
    "\34\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5"+
    "\3\0\2\5\3\0\2\5\31\0\14\5\1\0\32\5"+
    "\1\0\23\5\1\0\2\5\1\0\17\5\2\0\16\5"+
    "\42\0\173\5\105\0\65\5\u010b\0\35\5\3\0\61\5"+
    "\57\0\40\5\15\0\36\5\5\0\46\5\12\0\36\5"+
    "\2\0\44\5\4\0\10\5\1\0\5\5\52\0\236\5"+
    "\22\0\44\5\4\0\44\5\4\0\50\5\10\0\64\5"+
    "\14\0\13\5\1\0\17\5\1\0\7\5\1\0\2\5"+
    "\1\0\13\5\1\0\17\5\1\0\7\5\1\0\2\5"+
    "\103\0\67\5\11\0\26\5\12\0\10\5\30\0\6\5"+
    "\1\0\52\5\1\0\11\5\105\0\6\5\2\0\1\5"+
    "\1\0\54\5\1\0\2\5\3\0\1\5\2\0\27\5"+
    "\12\0\27\5\11\0\37\5\101\0\23\5\1\0\2\5"+
    "\12\0\26\5\12\0\32\5\106\0\70\5\6\0\2\5"+
    "\100\0\1\5\17\0\4\5\1\0\3\5\1\0\35\5"+
    "\52\0\35\5\3\0\35\5\43\0\10\5\1\0\34\5"+
    "\33\0\66\5\12\0\26\5\12\0\23\5\15\0\22\5"+
    "\156\0\111\5\67\0\63\5\15\0\63\5\15\0\44\5"+
    "\u015c\0\52\5\6\0\2\5\116\0\35\5\12\0\1\5"+
    "\10\0\26\5\52\0\22\5\56\0\25\5\33\0\27\5"+
    "\14\0\65\5\71\0\2\5\2\0\1\5\15\0\55\5"+
    "\40\0\31\5\32\0\44\5\35\0\1\5\2\0\1\5"+
    "\10\0\43\5\3\0\1\5\14\0\60\5\16\0\4\5"+
    "\25\0\1\5\1\0\1\5\43\0\22\5\1\0\31\5"+
    "\23\0\2\5\77\0\7\5\1\0\1\5\1\0\4\5"+
    "\1\0\17\5\1\0\12\5\7\0\57\5\46\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\3\0\1\5\22\0\1\5\14\0\5\5"+
    "\236\0\65\5\22\0\4\5\24\0\3\5\36\0\60\5"+
    "\24\0\2\5\1\0\1\5\270\0\57\5\51\0\4\5"+
    "\44\0\60\5\24\0\1\5\73\0\53\5\15\0\1\5"+
    "\107\0\33\5\45\0\7\5\271\0\54\5\164\0\100\5"+
    "\37\0\10\5\2\0\1\5\2\0\10\5\1\0\2\5"+
    "\1\0\30\5\17\0\1\5\1\0\1\5\136\0\10\5"+
    "\2\0\47\5\20\0\1\5\1\0\1\5\34\0\1\5"+
    "\12\0\50\5\7\0\1\5\25\0\1\5\13\0\56\5"+
    "\23\0\1\5\22\0\111\5\7\0\11\5\1\0\45\5"+
    "\21\0\1\5\61\0\36\5\160\0\7\5\1\0\2\5"+
    "\1\0\46\5\25\0\1\5\31\0\6\5\1\0\2\5"+
    "\1\0\40\5\16\0\1\5\u0147\0\23\5\17\0\1\5"+
    "\1\0\15\5\1\0\42\5\174\0\1\5\54\0\4\5"+
    "\37\0\232\5\146\0\157\5\21\0\304\5\u014c\0\141\5"+
    "\17\0\60\5\21\0\6\5\271\0\107\5\271\0\71\5"+
    "\7\0\37\5\21\0\117\5\21\0\36\5\22\0\60\5"+
    "\20\0\4\5\37\0\25\5\5\0\23\5\260\0\100\5"+
    "\200\0\113\5\5\0\1\5\102\0\15\5\100\0\2\5"+
    "\1\0\1\5\34\0\370\5\10\0\326\5\52\0\11\5"+
    "\u01e7\0\4\5\1\0\7\5\1\0\2\5\1\0\43\5"+
    "\17\0\1\5\35\0\3\5\2\0\1\5\16\0\4\5"+
    "\10\0\u018c\5\4\0\153\5\5\0\15\5\3\0\11\5"+
    "\7\0\12\5\146\0\125\5\1\0\107\5\1\0\2\5"+
    "\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5"+
    "\1\0\1\5\1\0\7\5\1\0\101\5\1\0\4\5"+
    "\2\0\10\5\1\0\7\5\1\0\34\5\1\0\4\5"+
    "\1\0\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5"+
    "\2\0\31\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\10\5\64\0\37\5"+
    "\6\0\6\5\u0105\0\76\5\222\0\55\5\12\0\7\5"+
    "\20\0\1\5\u0141\0\36\5\22\0\54\5\23\0\1\5"+
    "\320\0\34\5\364\0\7\5\1\0\4\5\1\0\2\5"+
    "\1\0\17\5\1\0\305\5\73\0\104\5\7\0\1\5"+
    "\u0164\0\1\5\117\0\4\5\1\0\33\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\5\4\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5"+
    "\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5"+
    "\1\0\1\5\1\0\12\5\1\0\21\5\5\0\3\5"+
    "\1\0\5\5\1\0\21\5\104\0\340\5\40\0\72\5"+
    "\6\0\336\5\2\0\u0182\5\16\0\u0131\5\17\0\156\5"+
    "\242\0\36\5\342\0\113\5\5\0\u0160\5\120\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30720];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\5\3\1\22\1\23\2\24\1\25"+
    "\2\1\1\26\1\1\1\27\1\30\1\31\1\3\1\32"+
    "\4\3\1\33\1\1\2\0\1\3\1\34\3\3\1\1"+
    "\1\35\1\3\1\36\2\3\1\37\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\112\0\157\0\224\0\271\0\112"+
    "\0\112\0\112\0\112\0\112\0\112\0\336\0\u0103\0\u0128"+
    "\0\112\0\u014d\0\u0172\0\u0197\0\112\0\112\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\u0250\0\112\0\112\0\112\0\u0275\0\112"+
    "\0\u029a\0\u02bf\0\112\0\u02e4\0\112\0\112\0\112\0\u0309"+
    "\0\271\0\u032e\0\u0353\0\u0378\0\u039d\0\112\0\u03c2\0\u0103"+
    "\0\u03e7\0\u040c\0\271\0\u0431\0\u0456\0\u047b\0\u04a0\0\271"+
    "\0\u04c5\0\271\0\u04ea\0\u050f\0\271\0\271";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\7\1\27\2\7\1\30"+
    "\3\7\1\31\3\7\1\32\1\33\1\34\1\35\10\36"+
    "\1\37\34\36\47\0\1\4\63\0\1\40\30\0\1\7"+
    "\7\0\1\41\1\42\6\0\16\7\12\0\1\43\41\0"+
    "\1\44\17\0\16\44\7\0\1\44\7\0\2\20\6\0"+
    "\16\44\23\0\1\45\44\0\1\46\44\0\1\47\30\0"+
    "\1\7\7\0\1\41\1\42\6\0\5\7\1\50\10\7"+
    "\7\0\1\7\7\0\1\41\1\42\6\0\2\7\1\51"+
    "\3\7\1\52\7\7\7\0\1\7\7\0\1\41\1\42"+
    "\6\0\1\7\1\53\14\7\7\0\1\7\7\0\1\41"+
    "\1\42\6\0\7\7\1\54\6\7\7\0\1\7\7\0"+
    "\1\41\1\42\6\0\3\7\1\55\12\7\16\0\1\56"+
    "\35\0\1\57\7\0\1\60\1\61\6\0\16\57\7\0"+
    "\1\57\7\0\2\44\6\0\16\57\7\0\1\44\7\0"+
    "\2\44\6\0\16\44\7\0\1\7\7\0\1\41\1\42"+
    "\6\0\11\7\1\62\4\7\7\0\1\7\7\0\1\41"+
    "\1\42\6\0\12\7\1\63\3\7\7\0\1\7\7\0"+
    "\1\41\1\42\6\0\12\7\1\64\3\7\7\0\1\7"+
    "\7\0\1\41\1\42\6\0\4\7\1\65\11\7\7\0"+
    "\1\7\7\0\1\41\1\42\6\0\4\7\1\66\11\7"+
    "\7\0\1\57\7\0\1\67\1\44\6\0\16\57\7\0"+
    "\1\44\7\0\2\61\6\0\16\44\7\0\1\7\7\0"+
    "\1\41\1\42\6\0\1\7\1\70\14\7\7\0\1\7"+
    "\7\0\1\41\1\42\6\0\13\7\1\71\2\7\7\0"+
    "\1\7\7\0\1\41\1\42\6\0\1\72\15\7\7\0"+
    "\1\7\7\0\1\41\1\42\6\0\5\7\1\73\10\7"+
    "\7\0\1\44\7\0\1\60\1\61\6\0\16\44\7\0"+
    "\1\7\7\0\1\41\1\42\6\0\10\7\1\74\5\7"+
    "\7\0\1\7\7\0\1\41\1\42\6\0\1\7\1\75"+
    "\14\7\7\0\1\7\7\0\1\41\1\42\6\0\6\7"+
    "\1\76\7\7\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1332];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\6\11\3\1\1\11\3\1\2\11"+
    "\5\1\3\11\1\1\1\11\2\1\1\11\1\1\3\11"+
    "\6\1\1\11\1\1\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[62];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    private BufferedReader inFile;
    private Token nextToken;

    public CMinusScanner2(String filename) 
    {
        try 
        {
            this.zzReader = new BufferedReader(new FileReader(filename));
            nextToken = scanToken();
        } catch (IOException e) 
        {
            System.err.println("oopsie your file not there");
        }
        
    }

    public Token getNextToken() 
    {
        try{
        Token returnToken = nextToken;
        if (nextToken.getType() != Token.TokenType.EOF)
            nextToken = scanToken();
        return returnToken;
        }
        catch (IOException e)
        {
            System.err.println("File Error");
            return null;
        }
    }

    public Token viewNextToken() {
        return nextToken;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CMinusScanner2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token scanToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case INCOMMENT: {
              yybegin(YYINITIAL); return new Token(Token.TokenType.ERROR);
            }  // fall though
            case 63: break;
            default:
              {
                return new Token(Token.TokenType.EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Token(Token.TokenType.ERROR);
            }
          // fall through
          case 33: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 34: break;
          case 3:
            { return new Token(Token.TokenType.ID, yytext());
            }
          // fall through
          case 35: break;
          case 4:
            { return new Token(Token.TokenType.OPEN_PAREN);
            }
          // fall through
          case 36: break;
          case 5:
            { return new Token(Token.TokenType.CLOSE_PAREN);
            }
          // fall through
          case 37: break;
          case 6:
            { return new Token(Token.TokenType.TIMES);
            }
          // fall through
          case 38: break;
          case 7:
            { return new Token(Token.TokenType.PLUS);
            }
          // fall through
          case 39: break;
          case 8:
            { return new Token(Token.TokenType.COMMA);
            }
          // fall through
          case 40: break;
          case 9:
            { return new Token(Token.TokenType.MINUS);
            }
          // fall through
          case 41: break;
          case 10:
            { return new Token(Token.TokenType.DIVIDE);
            }
          // fall through
          case 42: break;
          case 11:
            { return new Token(Token.TokenType.NUM, yytext());
            }
          // fall through
          case 43: break;
          case 12:
            { return new Token(Token.TokenType.SEMI);
            }
          // fall through
          case 44: break;
          case 13:
            { return new Token(Token.TokenType.LT);
            }
          // fall through
          case 45: break;
          case 14:
            { return new Token(Token.TokenType.ASSIGN);
            }
          // fall through
          case 46: break;
          case 15:
            { return new Token(Token.TokenType.GT);
            }
          // fall through
          case 47: break;
          case 16:
            { return new Token(Token.TokenType.OPEN_BRACKET);
            }
          // fall through
          case 48: break;
          case 17:
            { return new Token(Token.TokenType.CLOSE_BRACKET);
            }
          // fall through
          case 49: break;
          case 18:
            { return new Token(Token.TokenType.OPEN_CURLY);
            }
          // fall through
          case 50: break;
          case 19:
            { return new Token(Token.TokenType.CLOSE_CURLY);
            }
          // fall through
          case 51: break;
          case 20:
            { /* nothing */
            }
          // fall through
          case 52: break;
          case 21:
            { return new Token(Token.TokenType.NOTEQUAL);
            }
          // fall through
          case 53: break;
          case 22:
            { yybegin(INCOMMENT);
            }
          // fall through
          case 54: break;
          case 23:
            { return new Token(Token.TokenType.LOET);
            }
          // fall through
          case 55: break;
          case 24:
            { return new Token(Token.TokenType.EQUALS);
            }
          // fall through
          case 56: break;
          case 25:
            { return new Token(Token.TokenType.GOET);
            }
          // fall through
          case 57: break;
          case 26:
            { return new Token(Token.TokenType.IF);
            }
          // fall through
          case 58: break;
          case 27:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 59: break;
          case 28:
            { return new Token(Token.TokenType.INT);
            }
          // fall through
          case 60: break;
          case 29:
            { return new Token(Token.TokenType.ELSE);
            }
          // fall through
          case 61: break;
          case 30:
            { return new Token(Token.TokenType.VOID);
            }
          // fall through
          case 62: break;
          case 31:
            { return new Token(Token.TokenType.WHILE);
            }
          // fall through
          case 63: break;
          case 32:
            { return new Token(Token.TokenType.RETURN);
            }
          // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
